{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { COLORS, FONTS } from \"../../constants\";\n\nvar CustomButton = function CustomButton(_ref) {\n  var buttonText = _ref.buttonText,\n      buttonContainerStyle = _ref.buttonContainerStyle,\n      colors = _ref.colors,\n      onPress = _ref.onPress;\n\n  if (colors.length > 0) {\n    return React.createElement(TouchableOpacity, {\n      onPress: onPress\n    }, React.createElement(LinearGradient, {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: 1,\n        y: 0\n      },\n      colors: colors,\n      style: _objectSpread({}, buttonContainerStyle)\n    }, React.createElement(Text, {\n      style: _objectSpread({\n        textAlign: \"center\",\n        color: COLORS.white\n      }, FONTS.h3)\n    }, buttonText)));\n  } else {\n    return React.createElement(TouchableOpacity, {\n      onPress: onPress,\n      style: _objectSpread({}, buttonContainerStyle)\n    }, React.createElement(Text, {\n      style: _objectSpread({\n        textAlign: \"center\",\n        color: \"red\"\n      }, FONTS.h3)\n    }, buttonText));\n  }\n};\n\nexport default CustomButton;","map":{"version":3,"sources":["C:/Users/U759450/Desktop/food-recipe/food-recipe/components/UI/CustomButton.tsx"],"names":["LinearGradient","React","COLORS","FONTS","CustomButton","buttonText","buttonContainerStyle","colors","onPress","length","x","y","textAlign","color","white","h3"],"mappings":";;;;;;AACA,SAASA,cAAT,QAA+B,sBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,MAAT,EAAiBC,KAAjB;;AASA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAKR;AAAA,MAJXC,UAIW,QAJXA,UAIW;AAAA,MAHXC,oBAGW,QAHXA,oBAGW;AAAA,MAFXC,MAEW,QAFXA,MAEW;AAAA,MADXC,OACW,QADXA,OACW;;AACX,MAAID,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AACrB,WACE,oBAAC,gBAAD;AAAkB,MAAA,OAAO,EAAED;AAA3B,OACE,oBAAC,cAAD;AACE,MAAA,KAAK,EAAE;AAAEE,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OADT;AAEE,MAAA,GAAG,EAAE;AAAED,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAFP;AAGE,MAAA,MAAM,EAAEJ,MAHV;AAIE,MAAA,KAAK,oBACAD,oBADA;AAJP,OAQE,oBAAC,IAAD;AACE,MAAA,KAAK;AACHM,QAAAA,SAAS,EAAE,QADR;AAEHC,QAAAA,KAAK,EAAEX,MAAM,CAACY;AAFX,SAGAX,KAAK,CAACY,EAHN;AADP,OAOGV,UAPH,CARF,CADF,CADF;AAsBD,GAvBD,MAuBO;AACL,WACE,oBAAC,gBAAD;AACE,MAAA,OAAO,EAAEG,OADX;AAEE,MAAA,KAAK,oBACAF,oBADA;AAFP,OAME,oBAAC,IAAD;AACE,MAAA,KAAK;AACHM,QAAAA,SAAS,EAAE,QADR;AAEHC,QAAAA,KAAK,EAAE;AAFJ,SAGAV,KAAK,CAACY,EAHN;AADP,OAOGV,UAPH,CANF,CADF;AAkBD;AACF,CAjDD;;AAmDA,eAAeD,YAAf","sourcesContent":["// @ts-ignore\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport React from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\nimport { COLORS, FONTS } from \"../../constants\";\r\n\r\ninterface Props {\r\n  buttonText: any;\r\n  buttonContainerStyle: any;\r\n  colors: any;\r\n  onPress: any;\r\n}\r\n\r\nconst CustomButton = ({\r\n  buttonText,\r\n  buttonContainerStyle,\r\n  colors,\r\n  onPress,\r\n}: Props) => {\r\n  if (colors.length > 0) {\r\n    return (\r\n      <TouchableOpacity onPress={onPress}>\r\n        <LinearGradient\r\n          start={{ x: 0, y: 0 }}\r\n          end={{ x: 1, y: 0 }}\r\n          colors={colors}\r\n          style={{\r\n            ...buttonContainerStyle,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{\r\n              textAlign: \"center\",\r\n              color: COLORS.white,\r\n              ...FONTS.h3,\r\n            }}\r\n          >\r\n            {buttonText}\r\n          </Text>\r\n        </LinearGradient>\r\n      </TouchableOpacity>\r\n    );\r\n  } else {\r\n    return (\r\n      <TouchableOpacity\r\n        onPress={onPress}\r\n        style={{\r\n          ...buttonContainerStyle,\r\n        }}\r\n      >\r\n        <Text\r\n          style={{\r\n            textAlign: \"center\",\r\n            color: \"red\",\r\n            ...FONTS.h3,\r\n          }}\r\n        >\r\n          {buttonText}\r\n        </Text>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CustomButton;\r\n"]},"metadata":{},"sourceType":"module"}